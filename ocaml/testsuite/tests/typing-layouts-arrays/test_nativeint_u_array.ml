(* TEST
 readonly_files = "nativeint_u_array.ml"
 modules = "${readonly_files}"
 * flambda2
 ** bytecode
   flags = "-extension layouts_alpha"
 ** bytecode
   flags = "-extension layouts_beta"
 ** native
   flags = "-extension layouts_alpha"
 ** native
   flags = "-extension layouts_beta"
*)

(* Do not edit this file directly.
   Change "*.ml.template" files and run "gen.py" instead. *)

open Printf

module type S = sig
  type t
  val length : t -> int
  val get : t -> int -> nativeint
  val set : t -> int -> nativeint -> unit
  val make : int -> nativeint -> t
  val init : int -> (int -> nativeint) -> t
  val append : t -> t -> t
  val concat : t list -> t
  val sub : t -> int -> int -> t
  val copy : t -> t
  val fill : t -> int -> int -> nativeint -> unit
  val blit : t -> int -> t -> int -> int -> unit
  val to_list : t -> nativeint list
  val of_list : nativeint list -> t
  val iter : (nativeint -> unit) -> t -> unit
  val iteri : (int -> nativeint -> unit) -> t -> unit
  val map : (nativeint -> nativeint) -> t -> t
  val mapi : (int -> nativeint -> nativeint) -> t -> t
  val fold_left : ('a -> nativeint -> 'a) -> 'a -> t -> 'a
  val fold_right : (nativeint -> 'a -> 'a) -> t -> 'a -> 'a
  val iter2 : (nativeint -> nativeint -> unit) -> t -> t -> unit
  val map2 : (nativeint -> nativeint -> nativeint) -> t -> t -> t
  val for_all : (nativeint -> bool) -> t -> bool
  val exists : (nativeint -> bool) -> t -> bool
  val mem : nativeint -> t -> bool
  val sort : (nativeint -> nativeint -> int) -> t -> unit
  val stable_sort : (nativeint -> nativeint -> int) -> t -> unit
  val fast_sort : (nativeint -> nativeint -> int) -> t -> unit
  val to_seq : t -> nativeint Seq.t
  val to_seqi : t -> (int * nativeint) Seq.t
  val of_seq : nativeint Seq.t -> t
  val map_to_array : (nativeint -> 'a) -> t -> 'a array
  val map_from_array : ('a -> nativeint) -> 'a array -> t
  val unsafe_get : t -> int -> nativeint
  val unsafe_set : t -> int -> nativeint -> unit
  val equal : t -> t -> bool
  (* From Sys, rather than Float.Array *)
  val max_length : int
end

module Nativeint_array : S = struct
  include Stdlib.Array
  let map_to_array f a = map f a
  let map_from_array f a = map f a
  type t = nativeint array
  let max_length = Sys.max_array_length
  let equal = for_all2 (fun x y -> x = y)
end

module Std_Nativeint_u_array = Nativeint_u_array
module Nativeint_u_array : S = struct
  include Nativeint_u_array

  module Nativeint_u = Stdlib__Nativeint_u

  let to_boxed = Nativeint_u.to_nativeint
  let of_boxed = Nativeint_u.of_nativeint

  type t = nativeint# array

  let empty () = make 0 (of_boxed 0n)
  let to_seq a =
    let rec aux i () =
      if i < length a
      then
        let x = unsafe_get a i in
        Seq.Cons (to_boxed x, aux (i+1))
      else Seq.Nil
    in
    aux 0

  let to_seqi a =
    let rec aux i () =
      if i < length a
      then
        let x = unsafe_get a i in
        Seq.Cons ((i,to_boxed x), aux (i+1))
      else Seq.Nil
    in
    aux 0

  let of_rev_list = function
      [] -> empty ()
    | hd::tl as l ->
      let len = List.length l in
      let a = make len (of_boxed hd) in
      let rec fill i = function
          [] -> a
        | hd::tl -> unsafe_set a i (of_boxed hd); fill (i-1) tl
      in
      fill (len-2) tl

  let of_seq i =
    let l = Seq.fold_left (fun acc x -> x::acc) [] i in
    of_rev_list l


  let to_list t = fold_right (fun f l -> (to_boxed f)::l) t []
  (* let res = ref [] in
   * iter (fun f -> res := (to_boxed f) :: !res);
   * List.rev res *)

  let of_list l =
    let len = List.length l in
    let res = create len #0n in
    List.iteri (fun idx f -> set res idx (of_boxed f)) l;
    res
  let max_length = Sys.max_array_length
  let get t idx = to_boxed (get t idx)
  let set t idx v = set t idx (of_boxed v)

  let make l f = make l (of_boxed f)
  let init l f = init l (fun i -> of_boxed (f i))
  let fill a ofs len v = fill a ofs len (of_boxed v)
  let iter f t = iter (fun v -> f (to_boxed v)) t
  let iteri f t = iteri (fun i v -> f i (to_boxed v)) t
  let map f t = map (fun v -> of_boxed (f (to_boxed v))) t
  let mapi f t = mapi (fun i v -> of_boxed (f i (to_boxed v))) t
  let fold_left f acc t = fold_left (fun acc v -> f acc (to_boxed v)) acc t
  let fold_right f t acc = fold_right (fun v acc -> f (to_boxed v) acc) t acc

  let iter2 f a b = iter2 (fun v1 v2 -> f (to_boxed v1) (to_boxed v2)) a b
  let map2 f a b = map2 (fun v1 v2 -> of_boxed (f (to_boxed v1) (to_boxed v2))) a b
  let for_all f t = for_all (fun v -> f (to_boxed v)) t
  let exists f t = exists (fun v -> f (to_boxed v)) t
  let mem v t = mem (of_boxed v) t
  let sort f t = sort (fun a b -> f (to_boxed a) (to_boxed b)) t
  let stable_sort f t = stable_sort (fun a b -> f (to_boxed a) (to_boxed b)) t
  let fast_sort f t = fast_sort (fun a b -> f (to_boxed a) (to_boxed b)) t

  let map_to_array f t =
    if length t = 0 then [||] else begin
      let res = Array.make (length t) (f (get t 0)) in
      iteri (fun idx v -> if idx > 0 then Array.set res idx (f v)) t;
      res
    end

  let map_from_array f a =
    if Array.length a = 0 then empty () else begin
      let res = make (Array.length a) (f (Array.get a 0)) in
      Array.iteri (fun idx v -> if idx > 0 then set res idx (f v)) a;
      res
    end

  let unsafe_get t idx = to_boxed (unsafe_get t idx)
  let unsafe_set t idx v = unsafe_set t idx (of_boxed v)
  let equal = for_all2 (fun x y -> to_boxed x = to_boxed y)
end


module Test (A : S) : sig end = struct

  (* auxiliary functions *)

  let module I = Nativeint in
  let rec check_i_upto a i =
    if i >= 0 then begin
      assert (A.get a i = I.of_int i);
      check_i_upto a (i - 1);
    end
  in

  let check_i a = check_i_upto a (A.length a - 1) in

  let check_inval f arg =
    match f arg with
    | _ -> assert false
    | exception (Invalid_argument _) -> ()
    | exception _ -> assert false
  in

  (* [make] [set] [get] *)
  let a = A.make 1000 1n in
  for i = 0 to 499 do A.set a i (I.of_int i) done;
  let rec loop i =
    if i >= 0 then begin
      assert (A.get a i = (if i < 500 then I.of_int i else 1n));
      loop (i - 1);
    end
  in loop 999;
  check_inval (A.get a) (-1);
  check_inval (A.get a) (1000);
  check_inval (fun i -> A.set a i 1n) (-1);
  check_inval (fun i -> A.set a i 1n) 1000;
  check_inval (fun i -> A.make i 1n) (-1);
  check_inval (fun i -> A.make i 1n) (A.max_length + 1);

  let a = A.make 1001 1n in
  for i = 0 to 499 do A.set a i (I.of_int i) done;
  let rec loop i =
    if i >= 0 then begin
      assert (A.get a i = (if i < 500 then I.of_int i else 1n));
      loop (i - 1);
    end
  in loop 1000;
  check_inval (A.get a) (-1);
  check_inval (A.get a) (1001);
  check_inval (fun i -> A.set a i 1n) (-1);
  check_inval (fun i -> A.set a i 1n) 1001;

  (* [length] *)
  let test_length l = assert (l = (A.length (A.make l 1n))) in
  test_length 0;
  test_length 1;
  test_length 10;
  test_length 25;
  test_length 255;
  test_length 256;
  test_length 1000;
  test_length 1001;
  test_length 123456;

  (* [init] *)
  let a = A.init 1000 I.of_int in
  check_i a;
  let a = A.init 1001 I.of_int in
  check_i a;
  check_inval (fun i -> A.init i I.of_int) (-1);
  check_inval (fun i -> A.init i I.of_int) (A.max_length + 1);

  (* [append] *)
  let check m n =
    let a = A.init m I.of_int in
    let b = A.init n (fun x -> I.of_int (x + m)) in
    let c = A.append a b in
    assert (A.length c = (m + n));
    check_i c;
  in
  check 0 0;
  check 0 100;
  check 1 100;
  check 100 0;
  check 100 1;
  check 100 100;
  check 1000 1000;
  check 1000 1001;
  check 1001 1000;
  check 1001 1001;
  (* check_inval omitted *)

  (* [concat] *)
  let check l =
    let f (len, acc) n =
      (len + n, A.init n (fun i -> I.of_int (len + i)) :: acc)
    in
    let (total, ll) = List.fold_left f (0, []) l in
    let b = A.concat (List.rev ll) in
    assert (A.length b = total);
    check_i b;
  in
  check [0; 0; 0];
  check [1; 10; 100];
  check [10; 0];
  check [0];
  check [1000; 1000; 1000];
  check [];
  check [1001; 1000; 1000];
  check [1000; 1001; 1000];
  check [1000; 1000; 1001];
  check [1001; 1001; 1001];
  (* check_inval omitted *)

  (* [sub] *)
  let a = A.init 1000 (fun i -> I.of_int (i - 100)) in
  let b = A.sub a 100 200 in
  check_i b;
  assert (A.length b = 200);
  let b = A.sub a 1000 0 in
  check_i (A.sub a 1000 0);
  assert  (A.length b = 0);
  check_inval (A.sub a (-1)) 0;
  check_inval (A.sub a 0) (-1);
  check_inval (A.sub a 0) 1001;
  check_inval (A.sub a 1000) 1;

  let a = A.init 1001 (fun i -> I.of_int (i - 101)) in
  let b = A.sub a 101 199 in
  check_i b;
  assert (A.length b = 199);
  let b = A.sub a 1001 0 in
  check_i (A.sub a 1001 0);
  assert  (A.length b = 0);
  check_inval (A.sub a (-1)) 0;
  check_inval (A.sub a 0) (-1);
  check_inval (A.sub a 0) 1002;
  check_inval (A.sub a 1001) 1;

  (* [copy] *)
  let check len =
    let a = A.init len I.of_int in
    let b = A.copy a in
    check_i b;
    assert (A.length b = len);
  in
  check 0;
  check 1;
  check 128;
  check 1023;

  (* [blit] [fill] *)
  let test_blit_fill data initval ofs len =
    let a = A.of_list data in
    let b = A.make (List.length data) 1n in
    A.blit a 0 b 0 (A.length b);
    assert (A.equal a b);
    A.fill b ofs len initval;
    let rec check i = function
      | [] -> ()
      | hd :: tl ->
          assert (A.get b i = (if i >= ofs && i < ofs + len
                               then initval else hd));
          check (i + 1) tl;
    in
    check 0 data
  in
  test_blit_fill [1n;2n;5n;8n;-100n;2120000000n] 3n 3 2;
  let a = A.make 100 0n in
  check_inval (A.fill a (-1) 0) 1n;
  check_inval (A.fill a 0 (-1)) 1n;
  check_inval (A.fill a 0 101) 1n;
  check_inval (A.fill a 100 1) 1n;
  check_inval (A.fill a 101 0) 1n;
  check_inval (A.blit a (-1) a 0) 0;
  check_inval (A.blit a 0 a 0) (-1);
  check_inval (A.blit a 0 a 0) 101;
  check_inval (A.blit a 100 a 0) 1;
  check_inval (A.blit a 101 a 0) 0;
  check_inval (A.blit a 0 a (-1)) 0;
  check_inval (A.blit a 0 a 100) 1;
  check_inval (A.blit a 0 a 101) 0;
  let a = A.make 101 0n in
  check_inval (A.fill a (-1) 0) 1n;
  check_inval (A.fill a 0 (-1)) 1n;
  check_inval (A.fill a 0 102) 1n;
  check_inval (A.fill a 101 1) 1n;
  check_inval (A.fill a 102 0) 1n;
  check_inval (A.blit a (-1) a 0) 0;
  check_inval (A.blit a 0 a 0) (-1);
  check_inval (A.blit a 0 a 0) 102;
  check_inval (A.blit a 101 a 0) 1;
  check_inval (A.blit a 102 a 0) 0;
  check_inval (A.blit a 0 a (-1)) 0;
  check_inval (A.blit a 0 a 101) 1;
  check_inval (A.blit a 0 a 102) 0;
  let test_blit_overlap a ofs1 ofs2 len =
    let a = A.of_list a in
    let b = A.copy a in
    A.blit a ofs1 a ofs2 len;
    for i = 0 to len - 1 do
      assert (A.get b (ofs1 + i) = A.get a (ofs2 + i))
    done
  in
  test_blit_overlap [1n; 2n; 3n; 4n] 1 2 2;

  (* [to_list] [of_list] *)
  let a = A.init 1000 I.of_int in
  assert (A.equal a (A.of_list (A.to_list a)));
  let a = A.init 1001 I.of_int in
  assert (A.equal a (A.of_list (A.to_list a)));
  let a = A.init 0 I.of_int in
  assert (A.equal a (A.of_list (A.to_list a)));
  (* check_inval omitted *)

  (* [iter] *)
  let a = A.init 300 (I.of_int) in
  let r = ref 0n in
  A.iter (fun x -> assert (x = !r); r := I.add x 1n) a;
  A.iter (fun _ -> assert false) (A.make 0 0n);
  assert (!r = 300n);

  let a = A.init 301 (I.of_int) in
  let r = ref 0n in
  A.iter (fun x -> assert (x = !r); r := I.add x 1n) a;
  assert (!r = 301n);

  (* [iteri] *)
  let a = A.init 300 I.of_int in
  let r = ref 0 in
  let f i x =
    assert (i = !r);
    assert (x = I.of_int i);
    r := i + 1
  in
  A.iteri f a;
  A.iteri (fun _ _ -> assert false) (A.make 0 0n);
  assert (!r = 300);

  let a = A.init 301 I.of_int in
  let r = ref 0 in
  let f i x =
    assert (i = !r);
    assert (x = I.of_int i);
    r := i + 1
  in
  A.iteri f a;
  A.iteri (fun _ _ -> assert false) (A.make 0 0n);
  assert (!r = 301);

  (* [map], test result and order of evaluation *)
  let a = A.init 500 I.of_int in
  let r = ref 0n in
  let f x =
    assert (x = !r);
    r := I.add !r 1n;
    I.sub x 1n
  in
  let b = A.map f a in
  check_i (A.sub b 1 499);

  let a = A.init 501 I.of_int in
  let r = ref 0n in
  let f x =
    assert (x = !r);
    r := I.add !r 1n;
    I.sub x 1n
  in
  let b = A.map f a in
  check_i (A.sub b 1 500);

  (* [mapi], test result and order of evaluation *)
  let a = A.init 500 I.of_int in
  let r = ref 0n in
  let f i x =
    assert (x = I.of_int i);
    assert (x = !r);
    r := I.add !r 1n;
    I.sub x 1n
  in
  let b = A.mapi f a in
  check_i (A.sub b 1 499);

  let a = A.init 501 I.of_int in
  let r = ref 0n in
  let f i x =
    assert (x = I.of_int i);
    assert (x = !r);
    r := I.add !r 1n;
    I.sub x 1n
  in
  let b = A.mapi f a in
  check_i (A.sub b 1 500);

  (* [fold_left], test result and order of evaluation *)
  let a = A.init 500 I.of_int in
  let f acc x =
    assert (acc = x);
    I.add x 1n
  in
  let acc = A.fold_left f 0n a in
  assert (acc = 500n);

  let a = A.init 501 I.of_int in
  let acc = A.fold_left f 0n a in
  assert (acc = 501n);

  (* [fold_right], test result and order of evaluation *)
  let a = A.init 500 I.of_int in
  let f x acc =
    assert (x = I.sub acc 1n);
    x
  in
  let acc = A.fold_right f a 500n in
  assert (acc = 0n);

  let a = A.init 501 I.of_int in
  let acc = A.fold_right f a 501n in
  assert (acc = 0n);

  (* [iter2], test result and order of evaluation *)
  let a = A.init 123 I.of_int in
  let b = A.init 123 I.of_int in
  let r = ref 0n in
  let f x y =
    assert (x = !r);
    assert (y = !r);
    r := I.add!r 1n;
  in
  A.iter2 f a b;
  let c = A.make 456 0n in
  check_inval (A.iter2 (fun _ _ -> assert false) a) c;
  check_inval (A.iter2 (fun _ _ -> assert false) c) a;

  let a = A.init 124 I.of_int in
  let b = A.init 124 I.of_int in
  let r = ref 0n in
  let f x y =
    assert (x = !r);
    assert (y = !r);
    r := I.add !r 1n;
  in
  A.iter2 f a b;

  (* [map2], test result and order of evaluation *)
  let a = A.init 456 I.of_int in
  let b = A.init 456 (fun i -> I.(mul (of_int i) 2n)) in
  let r = ref 0n in
  let f x y =
    assert (x = !r);
    assert (y = I.mul !r 2n);
    r := I.add !r 1n;
    I.(neg (sub x y))
  in
  let c = A.map2 f a b in
  check_i c;
  let d = A.make 455 0n in
  check_inval (A.map2 (fun _ _ -> assert false) a) d;
  check_inval (A.map2 (fun _ _ -> assert false) d) a;

  let a = A.init 457 I.of_int in
  let b = A.init 457 (fun i -> I.(mul (of_int i) 2n)) in
  let r = ref 0n in
  let f x y =
    assert (x = !r);
    assert (y = I.mul !r 2n);
    r := I.add !r 1n;
    I.(neg (sub x y))
  in
  let c = A.map2 f a b in
  check_i c;

  (* [for_all], test result and order of evaluation *)
  let a = A.init 777 I.of_int in
  let r = ref 0n in
  let f x =
    assert (x = !r);
    r := I.add x 1n;
    true
  in
  assert (A.for_all f a);
  let f x = assert (x = 0n); false in
  assert (not (A.for_all f a));

  let a = A.init 778 I.of_int in
  let r = ref 0n in
  let f x =
    assert (x = !r);
    r := I.add x 1n;
    true
  in
  assert (A.for_all f a);
  let f x = assert (x = 0n); false in
  assert (not (A.for_all f a));

  (* [exists], test result and order of evaluation *)
  let a = A.init 777 I.of_int in
  let r = ref 0n in
  let f x =
    assert (x = !r);
    r := I.add x 1n;
    false
  in
  assert (not (A.exists f a));
  let f x = assert (x = 0n); true in
  assert (A.exists f a);

  let a = A.init 778 I.of_int in
  let r = ref 0n in
  let f x =
    assert (x = !r);
    r := I.add x 1n;
    false
  in
  assert (not (A.exists f a));
  let f x = assert (x = 0n); true in
  assert (A.exists f a);

  (* [mem] *)
  let a = A.init 7777 I.of_int in
  assert (A.mem 0n a);
  assert (A.mem 7776n a);
  assert (not (A.mem (-1n) a));
  assert (not (A.mem 7777n a));
  let check v =
    A.set a 1000 v;
    assert (A.mem v a);
  in
  List.iter check [I.max_int; I.min_int; -1n; 0n];

  let a = A.init 7778 I.of_int in
  assert (A.mem 0n a);
  assert (A.mem 7777n a);
  assert (not (A.mem (-1n) a));
  assert (not (A.mem 7778n a));
  let check v =
    A.set a 1001 v;
    assert (A.mem v a);
  in
  List.iter check [I.max_int; I.min_int; -1n; 0n];

  (* [sort] [fast_sort] [stable_sort] *)
  let check_sort sort cmp a =
    let rec check_sorted a i =
      if i + 1 < A.length a then begin
        assert (cmp (A.get a i) (A.get a (i + 1)) <= 0);
        check_sorted a (i + 1);
      end
    in
    let rec check_permutation a b i =
      let p = Array.make (A.length a) true in
      let rec find lo hi x =
        assert (lo < hi);
        if hi = lo + 1 then begin
          assert (cmp (A.get a lo) x = 0);
          assert (p.(lo));
          p.(lo) <- false;
        end else begin
          let mid = (lo + hi) / 2 in
          assert (lo < mid && mid < hi);
          match cmp (A.get a (mid - 1)) x with
          | 0 when p.(mid - 1) -> find lo mid x
          | 0 -> find mid hi x
          | c when c < 0 -> find mid hi x
          | c when c > 0 -> find lo mid x
          | _ -> assert false
        end
      in
      A.iter (find 0 (A.length a)) b
    in
    let b = A.copy a in
    sort cmp a;
    check_sorted a 0;
    check_permutation a b 0;
  in
  Random.init 123;
  let rand_val _ =
    match Random.int 1000 with
    | n when n < 500 -> Random.nativeint I.max_int
    | _ -> I.neg (Random.nativeint I.max_int)
  in
  let check s =
    let a = A.init 5 I.of_int in
    check_sort s Stdlib.compare a; (* already sorted *)
    check_sort s (fun x y -> Stdlib.compare y x) a; (* reverse-sorted *)

    let a = A.init 6 I.of_int in
    check_sort s Stdlib.compare a; (* already sorted *)
    check_sort s (fun x y -> Stdlib.compare y x) a; (* reverse-sorted *)

    let a = A.of_list [I.max_int; I.min_int; -1n; 0n] in
    check_sort s Stdlib.compare a; (* already sorted *)
    check_sort s (fun x y -> Stdlib.compare y x) a; (* reverse-sorted *)

    let a = A.init 50000 rand_val in
    check_sort s Stdlib.compare a;
    let a = A.init 50001 rand_val in
    check_sort s Stdlib.compare a;
    let a = A.make 1000 1n in
    check_sort s Stdlib.compare a;
    let a = A.make 1001 1n in
    check_sort s Stdlib.compare a;
    let a = A.append (A.make 1000 1n) (A.make 1000 2n) in
    check_sort s Stdlib.compare a;
    let a = A.append (A.make 1001 1n) (A.make 1001 2n) in
    check_sort s Stdlib.compare a;
  in
  check A.sort;
  check A.stable_sort;
  check A.fast_sort;

  (* [to_seq] *)
  let check_seq a =
    let r = ref 0 in
    let f x =
      assert (A.get a !r = x);
      r := !r + 1;
    in
    let s = A.to_seq a in
    Seq.iter f s;
  in
  check_seq (A.init 999 I.of_int);
  check_seq (A.init 1000 I.of_int);
  check_seq (A.make 0 0n);

  (* [to_seqi] *)
  let check_seqi a =
    let r = ref 0 in
    let f (i, x) =
      assert (i = !r);
      assert (A.get a !r = x);
      r := !r + 1;
    in
    let s = A.to_seqi a in
    Seq.iter f s;
  in
  check_seqi (A.init 999 I.of_int);
  check_seqi (A.init 1000 I.of_int);
  check_seqi (A.make 0 0n);

  (* [of_seq] *)
  let r = ref 0 in
  let rec f () =
    if !r = 100 then Seq.Nil else begin
      let res = Seq.Cons (I.of_int !r, f) in
      r := !r + 1;
      res
    end
  in
  let a = A.of_seq f in
  assert (A.equal a (A.init 100 I.of_int));
  assert (A.equal (A.of_seq Seq.empty) (A.make 0 0n));

  (* [map_to_array] *)
  let r = ref 0 in
  let f x =
    assert (x = I.of_int !r);
    r := !r + 1;
    I.mul x 2n
  in
  let a = A.init 876 I.of_int in
  let ar1 = A.map_to_array f a in
  let ar2 = Array.init 876 (fun x -> I.of_int (2 * x)) in
  assert (ar1 = ar2);
  let ar = A.map_to_array (fun _ -> assert false) (A.make 0 0n) in
  assert (ar = [| |]);

  (* [map_from_array] *)
  let r = ref 0 in
  let f x =
    assert (x = I.of_int !r);
    r := !r + 1;
    I.mul x 2n
  in
  let ar = Array.init 876 I.of_int in
  let a1 = A.map_from_array f ar in
  let a2 = A.init 876 (fun x -> I.of_int (2 * x)) in
  assert (A.equal a1 a2);
  let a = A.map_from_array (fun _ -> assert false) [| |] in
  assert (A.equal a (A.make 0 0n));

  (* comparisons *)
  (* No polymorphic compare yet *)
  (* let normalize_comparison n =
    if n = 0 then 0 else if n < 0 then -1 else 1
  in
  let check c l1 l2 =
    assert (c = (normalize_comparison (compare (A.of_list l1) (A.of_list l2))))
  in
  check 0    [0n; 1n; -4n; I.max_int; I.min_int]
             [0n; 1n; -4n; I.max_int; I.min_int];
  check (-1) [0n; 1n; -4n; I.max_int; I.min_int]
             [0n; 1n; -4n; I.max_int; I.(add min_int 1n)];
  check (-1) [0n; 1n; -4n; I.max_int; 45096843n]
             [0n; 1n; -4n; I.max_int; 45096844n];
  check 1    [0n; 2n; -4n]
             [0n; 0n; 3n];
  check 1    [0n; 2n; -4n]
             [I.min_int; 0n; 3n]; *)

  (* [unsafe_get] [unsafe_set] *)
  let a = A.make 3 0n in
  for i = 0 to 2 do A.unsafe_set a i (I.of_int i) done;
  for i = 0 to 2 do assert (A.unsafe_get a i = I.of_int i) done;

  let a = A.make 4 0n in
  for i = 0 to 3 do A.unsafe_set a i (I.of_int i) done;
  for i = 0 to 3 do assert (A.unsafe_get a i = I.of_int i) done;

  (* I/O *)
  (* No marshalling yet *)
  (* let test_structured_io value =
    let (tmp, oc) =
      Filename.open_temp_file ~mode:[Open_binary] "int64_array" ".data"
    in
    Marshal.to_channel oc value [];
    close_out oc;
    let ic = open_in_bin tmp in
    let value' = Marshal.from_channel ic in
    close_in ic;
    Sys.remove tmp;
    assert (compare value value' = 0)
  in
  let l = [0n; 1n; -4n; I.max_int; I.min_int; 31415926n] in
  test_structured_io (A.of_list l); *)

end

module T = Test (Nativeint_array)
module T2 = Test (Nativeint_u_array)

(* Extra tests for functions not covered above *)
module Nativeint_u = Stdlib__Nativeint_u
let () =
  let open Std_Nativeint_u_array in
  let module I = Nativeint in
  let to_boxed = Nativeint_u.to_nativeint in
  let u_of_int = Nativeint_u.of_int in
  let (+.) x y = I.add x y in
  let rec check_i_upto a i =
    if i >= 0 then begin
      assert (to_boxed (get a i) = I.of_int i);
      check_i_upto a (i - 1);
    end
  in

  let check_i a = check_i_upto a (length a - 1) in
  let check_inval f arg =
    match f arg with
    | _ -> assert false
    | exception (Invalid_argument _) -> ()
    | exception _ -> assert false
  in

  (* make_matrix *)
  check_inval (make_matrix (-1) 1) (u_of_int 1);
  check_inval (make_matrix 1 (-1)) (u_of_int 1);
  let check_matrix a =
    let row_len = Array.length a in
    assert (row_len > 0);
    let col_len = length (a.(0)) in
    for row = 0 to (row_len - 1) do
      assert (length (a.(row)) = col_len);
      for col = 0 to (col_len - 1) do
        assert Nativeint_u.(equal (get (a.(row)) col) (of_int 1))
      done
    done in
  let a = make_matrix 100 100 (u_of_int 1) in
  check_matrix a;
  let a = make_matrix 101 100 (u_of_int 1) in
  check_matrix a;
  let a = make_matrix 101 101 (u_of_int 1) in
  check_matrix a;
  let a = make_matrix 100 101 (u_of_int 1) in
  check_matrix a;

  (* for_all2 *)
  let test a =
    let r = ref 0n in
    let f x y =
      let x = to_boxed x in
      let y = to_boxed y in
      assert (x = !r);
      assert (y = !r);
      r := x +. 1n;
      true
    in
    assert (for_all2 f a a);
    let f x y =
      let x = to_boxed x in
      let y = to_boxed y in
      assert (x = 0n); assert (y = 0n); false in
    if length a > 0 then assert (not (for_all2 f a a))

  in
  let a = init 777 u_of_int in
  test a;
  let a = init 778 u_of_int in
  test a;
  let a = init 0 u_of_int in
  test a;
  check_inval (fun x -> for_all2 (fun _ _ -> true) (make 100 x) (make 101 x))
    (u_of_int 1);

  (* exists2 *)
  let test a =
    let r = ref 0n in
    let f x y =
      let x = to_boxed x in
      let y = to_boxed y in
      assert (x = !r);
      assert (y = !r);
      r := x +. 1n;
      false
    in
    assert (not (exists2 f a a));
    let f x y =
      let x = to_boxed x in
      let y = to_boxed y in
      assert (x = 0n); assert (y = 0n); true in
    if length a > 0 then assert (exists2 f a a)

  in
  let a = init 777 u_of_int in
  test a;
  let a = init 778 u_of_int in
  test a;
  let a = init 0 u_of_int in
  test a;
  check_inval (fun x -> exists2 (fun _ _ -> true) (make 100 x) (make 101 x))
    (u_of_int 1);

  (* static blocks *)
  let r = [| #0n; #1n; #2n; #3n; #4n; #5n;
             #6n; #7n; #8n; #9n; #10n; #11n;
             #12n; #13n; #14n; #15n; #16n; #17n;
             #18n; #19n; #20n; #21n; #22n; #23n;
             #24n; #25n; #26n; #27n; #28n; #29n;
             #30n; #31n; #32n; #33n; #34n; #35n;
             #36n; #37n; #38n; #39n; #40n; #41n;
             #42n; #43n; #44n; #45n; #46n; #47n;
             #48n; #49n; #50n; #51n; #52n; #53n;
             #54n; #55n; #56n; #57n; #58n; #59n;
             #60n; #61n; #62n; #63n; #64n; #65n;
             #66n; #67n; #68n; #69n; #70n; #71n;
             #72n; #73n; #74n; #75n; #76n; #77n;
             #78n; #79n; #80n; #81n; #82n; #83n;
             #84n; #85n; #86n; #87n; #88n; #89n;
             #90n; #91n; #92n; #93n; #94n; #95n;
             #96n; #97n; #98n; #99n; #100n; #101n;
             #102n; #103n; #104n; #105n; #106n; #107n;
             #108n; #109n; #110n; #111n; #112n; #113n;
             #114n; #115n; #116n; #117n; #118n; #119n;
             #120n; #121n; #122n; #123n; #124n; #125n;
             #126n; #127n; #128n; #129n; #130n; #131n;
             #132n; #133n; #134n; #135n; #136n; #137n;
             #138n; #139n; #140n; #141n; #142n; #143n;
             #144n; #145n; #146n; #147n; #148n; #149n;
             #150n; #151n; #152n; #153n; #154n; #155n;
             #156n; #157n; #158n; #159n; #160n; #161n;
             #162n; #163n; #164n; #165n; #166n; #167n;
             #168n; #169n; #170n; #171n; #172n; #173n;
             #174n; #175n; #176n; #177n; #178n; #179n;
             #180n; #181n; #182n; #183n; #184n; #185n;
             #186n; #187n; #188n; #189n; #190n; #191n;
             #192n; #193n; #194n; #195n; #196n; #197n;
             #198n; #199n |]
  in
  check_i r;
  let r = [| #0n; #1n; #2n; #3n; #4n; #5n;
             #6n; #7n; #8n; #9n; #10n; #11n;
             #12n; #13n; #14n; #15n; #16n; #17n;
             #18n; #19n; #20n; #21n; #22n; #23n;
             #24n; #25n; #26n; #27n; #28n; #29n;
             #30n; #31n; #32n; #33n; #34n; #35n;
             #36n; #37n; #38n; #39n; #40n; #41n;
             #42n; #43n; #44n; #45n; #46n; #47n;
             #48n; #49n; #50n; #51n; #52n; #53n;
             #54n; #55n; #56n; #57n; #58n; #59n;
             #60n; #61n; #62n; #63n; #64n; #65n;
             #66n; #67n; #68n; #69n; #70n; #71n;
             #72n; #73n; #74n; #75n; #76n; #77n;
             #78n; #79n; #80n; #81n; #82n; #83n;
             #84n; #85n; #86n; #87n; #88n; #89n;
             #90n; #91n; #92n; #93n; #94n; #95n;
             #96n; #97n; #98n; #99n; #100n; #101n;
             #102n; #103n; #104n; #105n; #106n; #107n;
             #108n; #109n; #110n; #111n; #112n; #113n;
             #114n; #115n; #116n; #117n; #118n; #119n;
             #120n; #121n; #122n; #123n; #124n; #125n;
             #126n; #127n; #128n; #129n; #130n; #131n;
             #132n; #133n; #134n; #135n; #136n; #137n;
             #138n; #139n; #140n; #141n; #142n; #143n;
             #144n; #145n; #146n; #147n; #148n; #149n;
             #150n; #151n; #152n; #153n; #154n; #155n;
             #156n; #157n; #158n; #159n; #160n; #161n;
             #162n; #163n; #164n; #165n; #166n; #167n;
             #168n; #169n; #170n; #171n; #172n; #173n;
             #174n; #175n; #176n; #177n; #178n; #179n;
             #180n; #181n; #182n; #183n; #184n; #185n;
             #186n; #187n; #188n; #189n; #190n; #191n;
             #192n; #193n; #194n; #195n; #196n; #197n;
             #198n; #199n; #200n |]
  in
  check_i r;
  (* dynamic blocks *)
  let[@inline never] f x = x in
  let r = [| f #0n; f #1n; f #2n; f #3n; f #4n; f #5n;
             f #6n; f #7n; f #8n; f #9n; f #10n; f #11n;
             f #12n; f #13n; f #14n; f #15n; f #16n; f #17n;
             f #18n; f #19n; f #20n; f #21n; f #22n; f #23n;
             f #24n; f #25n; f #26n; f #27n; f #28n; f #29n;
             f #30n; f #31n; f #32n; f #33n; f #34n; f #35n;
             f #36n; f #37n; f #38n; f #39n; f #40n; f #41n;
             f #42n; f #43n; f #44n; f #45n; f #46n; f #47n;
             f #48n; f #49n; f #50n; f #51n; f #52n; f #53n;
             f #54n; f #55n; f #56n; f #57n; f #58n; f #59n;
             f #60n; f #61n; f #62n; f #63n; f #64n; f #65n;
             f #66n; f #67n; f #68n; f #69n; f #70n; f #71n;
             f #72n; f #73n; f #74n; f #75n; f #76n; f #77n;
             f #78n; f #79n; f #80n; f #81n; f #82n; f #83n;
             f #84n; f #85n; f #86n; f #87n; f #88n; f #89n;
             f #90n; f #91n; f #92n; f #93n; f #94n; f #95n;
             f #96n; f #97n; f #98n; f #99n; f #100n; f #101n;
             f #102n; f #103n; f #104n; f #105n; f #106n; f #107n;
             f #108n; f #109n; f #110n; f #111n; f #112n; f #113n;
             f #114n; f #115n; f #116n; f #117n; f #118n; f #119n;
             f #120n; f #121n; f #122n; f #123n; f #124n; f #125n;
             f #126n; f #127n; f #128n; f #129n; f #130n; f #131n;
             f #132n; f #133n; f #134n; f #135n; f #136n; f #137n;
             f #138n; f #139n; f #140n; f #141n; f #142n; f #143n;
             f #144n; f #145n; f #146n; f #147n; f #148n; f #149n;
             f #150n; f #151n; f #152n; f #153n; f #154n; f #155n;
             f #156n; f #157n; f #158n; f #159n; f #160n; f #161n;
             f #162n; f #163n; f #164n; f #165n; f #166n; f #167n;
             f #168n; f #169n; f #170n; f #171n; f #172n; f #173n;
             f #174n; f #175n; f #176n; f #177n; f #178n; f #179n;
             f #180n; f #181n; f #182n; f #183n; f #184n; f #185n;
             f #186n; f #187n; f #188n; f #189n; f #190n; f #191n;
             f #192n; f #193n; f #194n; f #195n; f #196n; f #197n;
             f #198n; f #199n |]
  in
  check_i r;
  let r = [| f #0n; f #1n; f #2n; f #3n; f #4n; f #5n;
             f #6n; f #7n; f #8n; f #9n; f #10n; f #11n;
             f #12n; f #13n; f #14n; f #15n; f #16n; f #17n;
             f #18n; f #19n; f #20n; f #21n; f #22n; f #23n;
             f #24n; f #25n; f #26n; f #27n; f #28n; f #29n;
             f #30n; f #31n; f #32n; f #33n; f #34n; f #35n;
             f #36n; f #37n; f #38n; f #39n; f #40n; f #41n;
             f #42n; f #43n; f #44n; f #45n; f #46n; f #47n;
             f #48n; f #49n; f #50n; f #51n; f #52n; f #53n;
             f #54n; f #55n; f #56n; f #57n; f #58n; f #59n;
             f #60n; f #61n; f #62n; f #63n; f #64n; f #65n;
             f #66n; f #67n; f #68n; f #69n; f #70n; f #71n;
             f #72n; f #73n; f #74n; f #75n; f #76n; f #77n;
             f #78n; f #79n; f #80n; f #81n; f #82n; f #83n;
             f #84n; f #85n; f #86n; f #87n; f #88n; f #89n;
             f #90n; f #91n; f #92n; f #93n; f #94n; f #95n;
             f #96n; f #97n; f #98n; f #99n; f #100n; f #101n;
             f #102n; f #103n; f #104n; f #105n; f #106n; f #107n;
             f #108n; f #109n; f #110n; f #111n; f #112n; f #113n;
             f #114n; f #115n; f #116n; f #117n; f #118n; f #119n;
             f #120n; f #121n; f #122n; f #123n; f #124n; f #125n;
             f #126n; f #127n; f #128n; f #129n; f #130n; f #131n;
             f #132n; f #133n; f #134n; f #135n; f #136n; f #137n;
             f #138n; f #139n; f #140n; f #141n; f #142n; f #143n;
             f #144n; f #145n; f #146n; f #147n; f #148n; f #149n;
             f #150n; f #151n; f #152n; f #153n; f #154n; f #155n;
             f #156n; f #157n; f #158n; f #159n; f #160n; f #161n;
             f #162n; f #163n; f #164n; f #165n; f #166n; f #167n;
             f #168n; f #169n; f #170n; f #171n; f #172n; f #173n;
             f #174n; f #175n; f #176n; f #177n; f #178n; f #179n;
             f #180n; f #181n; f #182n; f #183n; f #184n; f #185n;
             f #186n; f #187n; f #188n; f #189n; f #190n; f #191n;
             f #192n; f #193n; f #194n; f #195n; f #196n; f #197n;
             f #198n; f #199n; f #200n |]
  in
  check_i r;
  check_i [| #0n; ((fun x -> x) #1n)|];
  check_i [| #0n; ((fun x -> x) #1n); #2n|];

  let () =
    let (=) = Nativeint_u.equal in
    (* match statement *)
    let d = [| #1n; #2n |] in
    (match d with
      | [| a; b |] ->
        assert (a = #1n);
        assert (b = #2n)
      | _ -> assert false);

    (* let statement pattern *)
    let a = [||] in
    let b = [| #1n |] in
    let c = append a b in
    let[@warning "-8"] [| d |] = c in
    assert (d = #1n);

    (* function argument pattern *)
    let[@warning "-8"] f [| b |] = b in
    assert (f [| #1n |] = #1n)
  in
  ()
